// SPDX-License-Identifier: BUSL-1.1
pragma solidity >=0.8.20;

import "base64-sol/base64.sol";

import "./interfaces/INFTView.sol";
import "./interfaces/IFoundry.sol";
import "./interfaces/IPublicNFT.sol";
import "./interfaces/INFTClaim.sol";
import "./interfaces/IPublicNFTViewBG.sol";

contract PublicNFTView is INFTView {
  struct Info {
    string tid;
    string tName;
    string cid;
    string cName;
    uint256 followers;
    uint256 omf;
    uint256 percent;
    uint256 timestamp;
    bool isClaim;
  }

  address public immutable foundry;
  uint256 public immutable appId;
  address public immutable publicNFT;
  address public immutable nftClaim;
  address public immutable viewBG;

  constructor(address _foundry, uint256 _appId, address _publicNFT, address _nftClaim, address _viewBG) {
    foundry = _foundry;
    appId = _appId;
    publicNFT = _publicNFT;
    nftClaim = _nftClaim;
    viewBG = _viewBG;
  }

  function name() external pure override returns (string memory) {
    return "Gate of Degen";
  }

  function symbol() external pure override returns (string memory) {
    return "GOD";
  }

  function tokenURI(uint256 tokenId) external view override returns (string memory) {
    Info memory info = _getInfo(tokenId);

    string[7] memory parts;

    parts[0] = '<svg width="528" height="527" viewBox="0 0 528 527" fill="none" xmlns="http://www.w3.org/2000/svg">';
    parts[1] = IPublicNFTViewBG(viewBG).BG();
    parts[2] = _getTnamePart(info.tName);

    parts[3] = _getIconPart(info.percent);

    parts[4] = _getOtherPart(info.percent, info.isClaim);

    parts[5] = _getDescPart(info.percent, info.isClaim);
    parts[6] = "</svg>";

    return _pack(tokenId, parts);
  }

  function _getInfo(uint256 tokenId) private view returns (Info memory info) {
    (info.tid, info.percent, , ) = IPublicNFT(publicNFT).tokenIdToInfo(tokenId);

    bytes memory data = IFoundry(foundry).tokenData(appId, info.tid);
    (info.tName, info.cid, info.cName, info.followers, info.omf, info.timestamp) = abi.decode(
      data,
      (string, string, string, uint256, uint256, uint256)
    );
    info.isClaim = INFTClaim(nftClaim).isClaim(info.tid);
  }

  function _getTnamePart(string memory tName) private pure returns (string memory part) {
    part = string(
      abi.encodePacked(
        '<text fill="#E5E5E5" style="white-space: pre" font-family="Courier New" font-size="32" font-weight="bold" letter-spacing="-0.011em"><tspan x="264" y="83.5156" text-anchor="middle">@',
        tName,
        "</tspan></text>"
      )
    );
  }

  function _getIconPart(uint256 percent) private pure returns (string memory part) {
    if (percent == 5000) {
      part = '<path d="M180.432 169.602C181.042 162.146 178.506 154.477 172.813 148.784C162.527 138.499 145.793 138.499 135.508 148.784C129.809 154.483 127.273 162.165 127.891 169.629C118.301 169.089 108.529 172.471 101.22 179.78C87.6078 193.392 87.6078 215.543 101.22 229.155C108.529 236.464 118.301 239.846 127.891 239.306C127.273 246.77 129.809 254.452 135.508 260.151C138.582 263.225 144.115 265.372 147.998 266.609L147.831 343.031L132.868 343.031L132.868 329.275C132.826 327.245 131.991 325.312 130.54 323.891C129.09 322.47 129.203 322.189 127.172 322.189C125.141 322.189 124.89 322.47 123.439 323.891C121.989 325.312 121.153 327.245 121.112 329.275L121.112 366.58C121.107 367.602 121.305 368.614 121.693 369.559C122.08 370.505 122.378 371.364 123.099 372.088C123.82 372.812 123.931 373.034 124.874 373.426C125.818 373.818 125.628 373.87 126.65 373.87C127.537 373.87 127.769 373.91 128.086 373.779C129.03 373.387 129.887 372.812 130.607 372.088C131.328 371.364 131.899 370.505 132.287 369.559C132.675 368.614 132.872 367.602 132.868 366.58L132.868 354.787L147.796 354.787L147.735 384.118C147.731 385.653 148.184 387.156 149.035 388.434C149.886 389.712 151.098 390.709 152.516 391.299C153.934 391.888 153.404 391.681 155.121 391.745C156.627 391.446 157.124 390.707 158.21 389.621C158.929 388.904 159.5 388.052 159.89 387.114C160.28 386.176 160.481 385.17 160.482 384.154L160.747 266.791C164.971 265.551 169.703 263.268 172.813 260.151C178.505 254.458 181.042 246.789 180.432 239.332C189.846 239.716 199.383 236.324 206.552 229.155C220.165 215.542 220.164 193.392 206.552 179.78C199.383 172.611 189.845 169.217 180.432 169.602ZM146.48 159.756C150.715 155.521 157.605 155.521 161.841 159.756C166.076 163.991 166.076 170.882 161.841 175.117C157.605 179.352 150.715 179.352 146.48 175.117C142.244 170.882 142.244 163.991 146.48 159.756ZM112.192 190.752C119.755 183.189 132.059 183.189 139.622 190.752C147.185 198.315 147.185 210.619 139.622 218.182C132.059 225.746 119.755 225.746 112.192 218.183C104.629 210.619 104.629 198.315 112.192 190.752ZM161.841 249.179C157.605 253.414 150.715 253.414 146.48 249.179C142.244 244.943 142.244 238.053 146.48 233.818C150.715 229.582 157.605 229.582 161.841 233.818C166.076 238.053 166.076 244.943 161.841 249.179ZM195.58 218.183C188.017 225.746 175.713 225.746 168.15 218.183C160.586 210.619 160.586 198.315 168.15 190.752C175.713 183.189 188.017 183.189 195.58 190.752C203.143 198.315 203.143 210.619 195.58 218.183Z" fill="#FFA500"></path>';
    } else {
      part = '<path d="M162.059 355.687C161.53 355.687 161.006 355.791 160.517 355.994C160.028 356.196 159.584 356.493 159.21 356.867C158.836 357.242 158.539 357.686 158.336 358.175C158.134 358.664 158.03 359.188 158.03 359.717V382.015C158.03 384.238 156.222 386.045 154 386.045C151.777 386.045 149.97 384.238 149.97 382.015V256.553C149.97 254.327 148.166 252.523 145.94 252.523C143.714 252.523 141.91 254.327 141.91 256.553V382.015C141.91 388.681 147.334 394.105 154 394.105C160.666 394.105 166.089 388.681 166.089 382.015V359.717C166.089 357.491 164.286 355.687 162.059 355.687Z" fill="#FFA500"></path><path d="M181.555 169.528C181.826 165.258 183.284 161.145 185.73 157.814C188.523 154.009 190 149.683 190 145.302C190 137.996 186.062 131.229 178.909 126.246C172.202 121.574 163.355 119 154 119C144.645 119 135.798 121.574 129.091 126.246C121.939 131.229 118 137.996 118 145.302C118 149.683 119.477 154.009 122.27 157.814C124.715 161.145 126.174 165.258 126.445 169.528C122.319 170.936 119.343 174.851 119.343 179.448V184.284C119.343 190.061 124.044 194.761 129.821 194.761H141.91V202.147H140.213C136.069 202.147 132.699 205.518 132.699 209.661V219.35C132.699 223.493 136.069 226.863 140.213 226.863H141.91V239.29C141.91 241.517 143.714 243.32 145.94 243.32C148.166 243.32 149.97 241.517 149.97 239.29V226.863H158.03V342.432C158.03 344.658 159.834 346.462 162.06 346.462C164.286 346.462 166.09 344.658 166.09 342.432V226.864H168.17C172.313 226.864 175.683 223.493 175.683 219.35V209.661C175.683 205.518 172.313 202.147 168.17 202.147H166.09V194.761H178.179C183.956 194.761 188.657 190.061 188.657 184.284V179.448C188.657 174.851 185.681 170.936 181.555 169.528ZM181.94 145.302C181.94 147.993 181.03 150.598 179.233 153.045C175.89 157.598 173.893 163.189 173.514 168.97H168.366C168.524 164.462 169.208 160.154 170.332 156.665C170.612 155.797 170.86 154.901 171.072 154C171.316 152.959 171.136 151.864 170.573 150.956C170.01 150.047 169.109 149.4 168.069 149.155C165.907 148.649 163.734 149.991 163.225 152.158C163.064 152.844 162.875 153.523 162.66 154.195C161.269 158.512 160.462 163.585 160.301 168.97H147.698C147.537 163.585 146.729 158.512 145.339 154.194C144.464 151.48 144.002 148.405 144.002 145.302C144.003 135.584 148.675 127.06 154 127.06C157.61 127.06 161.197 131.171 162.926 137.29C163.07 137.799 163.313 138.275 163.641 138.69C163.968 139.106 164.375 139.453 164.837 139.711C165.299 139.969 165.807 140.134 166.333 140.196C166.858 140.258 167.391 140.216 167.9 140.072C168.41 139.928 168.886 139.685 169.301 139.357C169.716 139.029 170.063 138.623 170.322 138.161C170.58 137.699 170.745 137.191 170.807 136.665C170.869 136.139 170.826 135.607 170.683 135.097C170.153 133.226 169.485 131.481 168.7 129.882C176.584 133.149 181.94 138.904 181.94 145.302ZM139.274 129.893C137.17 134.196 135.943 139.502 135.943 145.302C135.943 149.289 136.523 153.112 137.668 156.665C138.791 160.154 139.475 164.462 139.633 168.97H134.485C134.107 163.188 132.11 157.598 128.767 153.044C126.97 150.597 126.059 147.992 126.059 145.301C126.06 138.911 131.405 133.161 139.274 129.893ZM167.624 218.804H140.758V210.207H167.624V218.804ZM158.03 202.147H149.97V194.761H158.03V202.147ZM180.597 184.284C180.597 185.617 179.512 186.701 178.179 186.701H129.821C129.18 186.701 128.565 186.446 128.112 185.993C127.659 185.539 127.404 184.925 127.403 184.284V179.448C127.403 178.115 128.488 177.03 129.821 177.03H178.179C179.512 177.03 180.597 178.115 180.597 179.448V184.284Z" fill="#FFA500"></path>';
    }
  }

  function _getOtherPart(uint256 percent, bool isClaim) private pure returns (string memory part) {
    if (percent == 5000) {
      if (isClaim) {
        part = '<text fill="#FFA500" style="white-space: pre" font-family="Courier New" font-size="48" font-weight="bold" letter-spacing="-0.011em"><tspan x="248.086" y="278.773">=</tspan></text><text fill="#FFA500" style="white-space: pre" font-family="Courier New" font-size="40" font-weight="bold" letter-spacing="-0.011em"><tspan x="408.916" y="311.38">%</tspan></text><path d="M368.301 315.595C361.644 315.595 355.685 314.396 350.426 311.997C345.166 309.566 340.989 306.24 337.893 302.018C334.831 297.796 333.2 292.967 333 287.53H350.975C351.308 291.56 353.122 294.854 356.417 297.413C359.713 299.939 363.674 301.203 368.301 301.203C371.929 301.203 375.158 300.403 377.988 298.804C380.817 297.205 383.047 294.982 384.678 292.135C386.309 289.289 387.108 286.043 387.075 282.397C387.108 278.687 386.293 275.392 384.628 272.514C382.964 269.635 380.684 267.381 377.788 265.75C374.892 264.086 371.563 263.255 367.802 263.255C364.739 263.223 361.727 263.767 358.764 264.886C355.802 266.005 353.455 267.477 351.724 269.3L334.997 266.661L340.34 216H399.657V230.872H355.669L352.723 256.922H353.322C355.219 254.779 357.899 253.004 361.361 251.597C364.822 250.158 368.617 249.438 372.745 249.438C378.936 249.438 384.462 250.845 389.322 253.66C394.182 256.442 398.01 260.28 400.806 265.174C403.602 270.067 405 275.664 405 281.965C405 288.457 403.436 294.246 400.307 299.332C397.211 304.385 392.9 308.367 387.374 311.277C381.882 314.156 375.524 315.595 368.301 315.595Z" fill="#FFA500"></path>';
      } else {
        part = '<text style="white-space: pre" letter-spacing="-0.011em" font-weight="bold" font-size="48" font-family="Courier New" fill="#FFA500"><tspan x="248.086" y="305.773">=</tspan></text><text fill="#FFA500" style="white-space: pre" font-family="Courier New" font-size="40" font-weight="bold" letter-spacing="-0.011em"><tspan x="408.916" y="252.38">%</tspan></text><path d="M368.301 256.595C361.644 256.595 355.685 255.396 350.426 252.997C345.166 250.566 340.989 247.24 337.893 243.018C334.831 238.796 333.2 233.967 333 228.53H350.975C351.308 232.56 353.122 235.854 356.417 238.413C359.713 240.939 363.674 242.203 368.301 242.203C371.929 242.203 375.158 241.403 377.988 239.804C380.817 238.205 383.047 235.982 384.678 233.135C386.309 230.289 387.108 227.043 387.075 223.397C387.108 219.687 386.293 216.392 384.628 213.514C382.964 210.635 380.684 208.381 377.788 206.75C374.892 205.086 371.563 204.255 367.802 204.255C364.739 204.223 361.727 204.767 358.764 205.886C355.802 207.005 353.455 208.477 351.724 210.3L334.997 207.661L340.34 157H399.657V171.872H355.669L352.723 197.922H353.322C355.219 195.779 357.899 194.004 361.361 192.597C364.822 191.158 368.617 190.438 372.745 190.438C378.936 190.438 384.462 191.845 389.322 194.66C394.182 197.442 398.01 201.28 400.806 206.174C403.602 211.067 405 216.664 405 222.965C405 229.457 403.436 235.246 400.307 240.332C397.211 245.385 392.9 249.367 387.374 252.277C381.882 255.156 375.524 256.595 368.301 256.595Z" fill="#FFA500"></path><text fill="#FFA500" style="white-space: pre" font-family="Courier New" font-size="48" font-weight="bold" letter-spacing="-0.011em"><tspan x="334.407" y="305.369">+</tspan></text><text fill="#FFA500" style="white-space: pre" font-family="Courier New" font-size="24" font-weight="bold" letter-spacing="-0.011em"><tspan x="413.721" y="374.982">%</tspan></text><path d="M349.285 328.596C351.445 328.611 353.546 328.992 355.588 329.74C357.645 330.472 359.496 331.675 361.141 333.346C362.787 335.002 364.094 337.223 365.064 340.008C366.034 342.793 366.519 346.238 366.519 350.343C366.533 354.213 366.122 357.672 365.284 360.721C364.462 363.756 363.279 366.321 361.736 368.417C360.194 370.514 358.335 372.111 356.161 373.211C353.987 374.31 351.541 374.86 348.823 374.86C345.973 374.86 343.446 374.303 341.242 373.189C339.053 372.075 337.283 370.55 335.931 368.615C334.579 366.68 333.749 364.467 333.441 361.975H341.484C341.896 363.763 342.733 365.185 343.997 366.24C345.275 367.281 346.883 367.802 348.823 367.802C351.952 367.802 354.361 366.446 356.051 363.734C357.74 361.022 358.585 357.255 358.585 352.432H358.277C357.557 353.722 356.624 354.836 355.478 355.774C354.332 356.697 353.032 357.408 351.577 357.907C350.138 358.405 348.61 358.654 346.994 358.654C344.349 358.654 341.969 358.024 339.854 356.763C337.753 355.503 336.085 353.773 334.851 351.574C333.632 349.375 333.015 346.861 333 344.032C333 341.1 333.676 338.469 335.027 336.138C336.394 333.793 338.296 331.946 340.735 330.597C343.174 329.234 346.024 328.567 349.285 328.596ZM349.308 335.193C347.721 335.193 346.288 335.581 345.01 336.358C343.747 337.12 342.748 338.161 342.013 339.48C341.293 340.785 340.933 342.244 340.933 343.856C340.948 345.454 341.308 346.905 342.013 348.21C342.733 349.515 343.71 350.548 344.944 351.31C346.193 352.073 347.618 352.454 349.219 352.454C350.409 352.454 351.519 352.226 352.547 351.772C353.575 351.318 354.472 350.687 355.236 349.881C356.014 349.06 356.616 348.129 357.043 347.088C357.483 346.048 357.696 344.948 357.682 343.79C357.682 342.251 357.314 340.829 356.58 339.524C355.86 338.22 354.868 337.172 353.605 336.38C352.356 335.588 350.924 335.193 349.308 335.193Z" fill="#FFA500"></path><path d="M388.803 374.86C385.864 374.86 383.235 374.31 380.913 373.211C378.592 372.097 376.748 370.572 375.382 368.637C374.03 366.702 373.311 364.489 373.222 361.997H381.156C381.303 363.844 382.103 365.354 383.558 366.526C385.012 367.684 386.761 368.263 388.803 368.263C390.404 368.263 391.829 367.897 393.078 367.164C394.327 366.431 395.311 365.412 396.031 364.108C396.751 362.803 397.103 361.315 397.089 359.644C397.103 357.943 396.743 356.434 396.009 355.114C395.274 353.795 394.268 352.762 392.99 352.014C391.712 351.252 390.242 350.871 388.582 350.871C387.231 350.856 385.901 351.105 384.594 351.618C383.286 352.131 382.25 352.805 381.486 353.641L374.104 352.432L376.462 329.212H402.642V336.028H383.227L381.927 347.968H382.192C383.029 346.986 384.212 346.172 385.74 345.527C387.267 344.868 388.942 344.538 390.764 344.538C393.497 344.538 395.935 345.183 398.08 346.473C400.225 347.748 401.915 349.507 403.149 351.75C404.383 353.993 405 356.558 405 359.446C405 362.422 404.31 365.075 402.929 367.406C401.562 369.722 399.66 371.547 397.221 372.881C394.797 374.2 391.991 374.86 388.803 374.86Z" fill="#FFA500"></path>';
      }
    } else {
      string memory style = 'fill="#A3A9AF"';
      if (isClaim) {
        style = 'fill="#FFA500"';
      }
      string[9] memory parts;
      parts[0] = "<text ";
      parts[1] = style;
      parts[
        2
      ] = ' style="white-space: pre" font-family="Courier New" font-size="48" font-weight="bold" letter-spacing="-0.011em"><tspan x="249.086" y="273.773">=</tspan></text><text ';
      parts[3] = style;
      parts[
        4
      ] = ' style="white-space: pre" font-family="Courier New" font-size="24" font-weight="bold" letter-spacing="-0.011em"><tspan x="452.721" y="294.387">%</tspan></text><path d="M350.69 222.002C354.229 222.026 357.673 222.65 361.019 223.875C364.39 225.077 367.424 227.047 370.121 229.785C372.817 232.5 374.96 236.14 376.549 240.705C378.139 245.269 378.933 250.915 378.933 257.642C378.957 263.984 378.283 269.654 376.911 274.651C375.562 279.624 373.624 283.829 371.096 287.264C368.568 290.7 365.522 293.318 361.958 295.12C358.395 296.922 354.386 297.823 349.932 297.823C345.261 297.823 341.119 296.91 337.508 295.084C333.92 293.258 331.019 290.76 328.803 287.588C326.588 284.417 325.228 280.789 324.722 276.705H337.905C338.579 279.636 339.951 281.967 342.022 283.696C344.117 285.402 346.753 286.255 349.932 286.255C355.06 286.255 359.009 284.033 361.778 279.588C364.547 275.144 365.931 268.969 365.931 261.065H365.426C364.246 263.179 362.717 265.005 360.839 266.543C358.961 268.056 356.83 269.222 354.446 270.038C352.087 270.855 349.582 271.264 346.934 271.264C342.6 271.264 338.699 270.231 335.232 268.165C331.789 266.098 329.056 263.264 327.034 259.66C325.035 256.056 324.024 251.936 324 247.299C324 242.494 325.108 238.182 327.323 234.362C329.562 230.518 332.68 227.491 336.677 225.281C340.674 223.047 345.345 221.953 350.69 222.002ZM350.726 232.813C348.126 232.813 345.778 233.449 343.683 234.722C341.613 235.972 339.976 237.677 338.772 239.84C337.592 241.978 337.002 244.368 337.002 247.011C337.026 249.63 337.616 252.008 338.772 254.146C339.951 256.284 341.553 257.978 343.575 259.227C345.622 260.477 347.957 261.101 350.582 261.101C352.532 261.101 354.35 260.729 356.035 259.984C357.721 259.239 359.189 258.206 360.442 256.885C361.718 255.54 362.705 254.014 363.403 252.308C364.125 250.603 364.475 248.801 364.45 246.903C364.45 244.38 363.848 242.05 362.645 239.912C361.465 237.774 359.84 236.056 357.769 234.759C355.722 233.461 353.375 232.813 350.726 232.813Z" ';
      parts[5] = style;
      parts[
        6
      ] = '></path><path d="M415.454 297.823C410.639 297.823 406.329 296.922 402.525 295.12C398.72 293.294 395.699 290.796 393.459 287.624C391.244 284.453 390.065 280.825 389.92 276.741H402.922C403.163 279.768 404.475 282.243 406.859 284.165C409.242 286.063 412.108 287.012 415.454 287.012C418.079 287.012 420.414 286.411 422.461 285.21C424.508 284.009 426.121 282.339 427.301 280.201C428.48 278.063 429.058 275.624 429.034 272.885C429.058 270.099 428.468 267.624 427.264 265.462C426.061 263.3 424.411 261.606 422.317 260.381C420.222 259.131 417.814 258.507 415.093 258.507C412.878 258.483 410.699 258.891 408.556 259.732C406.413 260.573 404.716 261.678 403.464 263.047L391.365 261.065L395.229 223.011H438.136V234.182H406.317L404.186 253.75H404.619C405.992 252.14 407.93 250.807 410.434 249.75C412.938 248.669 415.683 248.128 418.669 248.128C423.147 248.128 427.144 249.185 430.659 251.299C434.175 253.39 436.944 256.272 438.966 259.948C440.989 263.624 442 267.828 442 272.561C442 277.438 440.868 281.786 438.605 285.606C436.366 289.402 433.248 292.393 429.251 294.58C425.278 296.742 420.679 297.823 415.454 297.823Z" ';
      parts[7] = style;
      parts[8] = "></path>";

      part = string(
        abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8])
      );
    }
  }

  function _getDescPart(uint256 percent, bool isClaim) private pure returns (string memory part) {
    string memory line1Style;
    string memory line2Style;
    string memory line3Style;
    string memory isClaimText;

    if (isClaim) {
      isClaimText = "after";
      if (percent == 5000) {
        // 3
        line1Style = 'x="169" y="337.726"';
        line2Style = 'x="169" y="354.726"';
        line3Style = 'x="169" y="371.726"';
      } else {
        // 4
        line1Style = 'x="183" y="336.726"';
        line2Style = 'x="183" y="353.726"';
        line3Style = 'x="183" y="370.726"';
      }
    } else {
      isClaimText = "before";
      if (percent == 5000) {
        // 1
        line1Style = 'x="169" y="321.726"';
        line2Style = 'x="169" y="338.726"';
        line3Style = 'x="169" y="355.726"';
      } else {
        // 2
        line1Style = 'x="183" y="336.726"';
        line2Style = 'x="183" y="353.726"';
        line3Style = 'x="183" y="370.726"';
      }
    }

    string[9] memory parts;
    parts[
      0
    ] = '<text fill="#A3A9AF" fill-opacity="0.8" style="white-space: pre" font-family="Courier New" font-size="14" font-weight="bold" letter-spacing="-0.011em"><tspan ';
    parts[1] = line1Style;
    parts[2] = ">Lord takes over ";
    parts[3] = isClaimText;
    parts[4] = "</tspan><tspan ";
    parts[5] = line2Style;
    parts[6] = ">Castle tax </tspan><tspan ";
    parts[7] = line3Style;
    parts[8] = ">distribution rights</tspan></text>";

    part = string(
      abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8])
    );
  }

  function _pack(uint256 tokenId, string[7] memory parts) private view returns (string memory output) {
    string memory partsOutput = string(
      abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6])
    );

    string memory json = Base64.encode(
      bytes(
        string(
          abi.encodePacked(
            '{"name": "',
            _name(tokenId),
            '", "description": "',
            _desc(tokenId),
            '", "image": "data:image/svg+xml;base64,',
            Base64.encode(bytes(partsOutput)),
            '"}'
          )
        )
      )
    );
    output = string(abi.encodePacked("data:application/json;base64,", json));
  }

  function _name(uint256 tokenId) private view returns (string memory) {
    Info memory info = _getInfo(tokenId);
    string memory _type = "";
    if (info.percent == 5000) {
      _type = "Key";
    } else {
      _type = "Lord";
    }
    return string(abi.encodePacked("@", info.tName, " - ", _type));
  }

  function _desc(uint256 tokenId) private view returns (string memory) {
    Info memory info = _getInfo(tokenId);
    if (info.percent == 5000) {
      return
        string(
          abi.encodePacked(
            "The Keyholder to receive 100% of the total castle tax from @",
            info.tName,
            "'s trades. Once @",
            info.tName,
            " takes over the castle, the Keyholder will then receive 5%."
          )
        );
    } else {
      return
        string(
          abi.encodePacked(
            "This lord holder to receive 95% of the total castle tax from @",
            info.tName,
            "'s trades once @",
            info.tName,
            " takes over the castle."
          )
        );
    }
  }
}
